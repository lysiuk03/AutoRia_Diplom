pipeline {
    agent any
    stages {
        stage('Download Source') {
            steps {
                script {
                    if (fileExists('stable')) {
                        sh 'git -C stable pull origin stable'
                    } else {
                        sh 'git clone https://github.com/lysiuk03/AutoRia_Diplom.git -b stable stable'
                    }
                }
            }
        }
        stage('Get Public Address') {
            steps {
                script {
                    if (!env.PUBLIC_ADDRESS) {
                        def publicAddress = sh(script: "curl -s ifconfig.me", returnStdout: true).trim()
                        env.PUBLIC_ADDRESS = publicAddress
                    } else {
                        println("Geted from parameters")
                    }
                }
            }
        }
        stage('Check Latest PostgreSQL Image') {
            steps {
                script {
                    withCredentials([ 
                        usernamePassword(credentialsId: 'duck', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS'),
                        string(credentialsId: 'dpr', variable: 'DOCKER_PRIVATE_REPO')
                    ]) {
                        def latestTag = sh(script: 'curl -s -H "Authorization: Bearer ${DOCKER_PASS}" "https://hub.docker.com/v2/repositories/${DOCKER_USER}/${DOCKER_PRIVATE_REPO}/tags/?page_size=100" | grep -o \'"name":"wheeldeal.postgres\\.r\\.[^"]*\' | sed \'s/"name":"//\' | sort -V | tail -n 1', returnStdout: true).trim()
                        if (latestTag) {
                            echo "Found latest PostgreSQL image: ${latestTag}"
                            env.POSTGRES_IMAGE = "${DOCKER_USER}/${DOCKER_PRIVATE_REPO}:${latestTag}"
                        } else {
                            echo "No matching PostgreSQL image found, using default."
                            //env.POSTGRES_IMAGE = "${DOCKER_USER}/${DOCKER_PRIVATE_REPO}:postgres.r.0"
                            env.POSTGRES_IMAGE = "postgres:latest"
                        }
                    }
                }
            }
        }
        stage('Prepare Settings Build') {
            steps {
                script {
                    withCredentials([ 
                        usernamePassword(credentialsId: 'jgul', usernameVariable: 'POSTGRES_USER', passwordVariable: 'POSTGRES_PASSWORD'),
                        string(credentialsId: 'deb', variable: 'POSTGRES_DB')
                    ]) {
                        def settingsTemplate = readFile './docker-compose.build.stack.yaml.j2'
                        settingsTemplate = settingsTemplate.replaceAll('\\{\\{ POSTGRES_USER \\}\\}', env.POSTGRES_USER)
                        settingsTemplate = settingsTemplate.replaceAll('\\{\\{ POSTGRES_PASSWORD \\}\\}', env.POSTGRES_PASSWORD)
                        settingsTemplate = settingsTemplate.replaceAll('\\{\\{ POSTGRES_DB \\}\\}', env.POSTGRES_DB)
                        settingsTemplate = settingsTemplate.replaceAll('\\{\\{ POSTGRES_IMAGE \\}\\}', env.POSTGRES_IMAGE)
                        settingsTemplate = settingsTemplate.replaceAll('\\{\\{ BACKEND_IMAGE_BUILD \\}\\}', "wheeldeal:backend.b.${BUILD_NUMBER}")
                        settingsTemplate = settingsTemplate.replaceAll('\\{\\{ FRONTEND_IMAGE_BUILD \\}\\}', "wheeldeal:frontend.b.${BUILD_NUMBER}")
                        writeFile file: './docker-compose.build.stack.yaml', text: settingsTemplate
                        
                        def dbInitScript = readFile './postgres_init/init-db.sh.j2'
                        dbInitScript = dbInitScript.replaceAll('\\{\\{ POSTGRES_USER \\}\\}', env.POSTGRES_USER)
                        dbInitScript = dbInitScript.replaceAll('\\{\\{ POSTGRES_PASSWORD \\}\\}', env.POSTGRES_PASSWORD)
                        dbInitScript = dbInitScript.replaceAll('\\{\\{ POSTGRES_DB \\}\\}', env.POSTGRES_DB)
                        writeFile file: './postgres_init/init-db.sh', text: dbInitScript

                        def settingsBackend = readFile './stable/WebBack/WebBack/appsettings.json.j2'
                        settingsBackend = settingsBackend.replaceAll('\\{\\{ PUBLIC_ADDRESS \\}\\}', env.PUBLIC_ADDRESS)
                        settingsBackend = settingsBackend.replaceAll('\\{\\{ POSTGRES_USER \\}\\}', env.POSTGRES_USER)
                        settingsBackend = settingsBackend.replaceAll('\\{\\{ POSTGRES_PASSWORD \\}\\}', env.POSTGRES_PASSWORD)
                        settingsBackend = settingsBackend.replaceAll('\\{\\{ POSTGRES_DB \\}\\}', env.POSTGRES_DB)
                        writeFile file: './stable/WebBack/WebBack/appsettings.json', text: settingsBackend
                        
                        def settingsFrontend = readFile './stable/my-front/.env.j2'
                        settingsFrontend = settingsFrontend.replaceAll('\\{\\{ PUBLIC_ADDRESS \\}\\}', env.PUBLIC_ADDRESS)
                        writeFile file: './stable/my-front/.env', text: settingsFrontend
                    }
                }
            }
        }
        
        stage('Build Backend') {
            steps {
                script {
                    sh "docker build -f Dockerfile.back -t wheeldeal:backend.b.${BUILD_NUMBER} ."
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {
                    sh "docker build -f Dockerfile.front -t wheeldeal:frontend.b.${BUILD_NUMBER} ."
                }
            }
        }

        stage('Start Build') {
            steps {
                script {
                    sh "docker-compose -f ./docker-compose.build.stack.yaml up -d"
                }
            }
        }
        stage('Check Health Backend') {
            steps {
                script {
                    sleep(60) 
                    def backendStatus = sh(script: 'docker inspect -f \'{{.State.Status}}\' wheeldeal_backend_b', returnStdout: true).trim()
                    def backendLogs = sh(script: 'docker logs wheeldeal_backend_b', returnStdout: true).trim()

                    if (backendLogs.contains('error') || backendLogs.contains('Error')) {
                        if (backendStatus == 'running') {
                            echo "Warning: Backend container is running but contains errors:\n${backendLogs}"
                        } else {
                            error "Fatal error found in Backend container logs:\n${backendLogs}"
                        }
                    } else {
                        echo "Backend container health check: OK"
                    }
                }
            }
        }

        stage('Check Health Frontend') {
            steps {
                script {
                    sleep(60)
                    def frontendStatus = sh(script: 'docker inspect -f \'{{.State.Status}}\' wheeldeal_frontend_b', returnStdout: true).trim()
                    def frontendLogs = sh(script: 'docker logs wheeldeal_frontend_b', returnStdout: true).trim()

                    if (frontendLogs.contains('error') || frontendLogs.contains('Error')) {
                        if (frontendStatus == 'running') {
                            echo "Warning: Frontend container is running but contains errors:\n${frontendLogs}"
                        } else {
                            error "Fatal error found in Frontend container logs:\n${frontendLogs}"
                        }
                    } else {
                        echo "Frontend container health check: OK"
                    }
                }
            }
        }

        stage('Push Success Build to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'duck', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    }
                        sh "docker stop wheeldeal_postgres_b wheeldeal_frontend_b wheeldeal_backend_b"
                        sh "docker commit wheeldeal_postgres_b jj975/q1:wheeldeal.postgres.r.${BUILD_NUMBER}"
                        sh "docker push jj975/q1:wheeldeal.postgres.r.${BUILD_NUMBER}"
                        sh "docker commit wheeldeal_backend_b jj975/q1:wheeldeal.backend.r.${BUILD_NUMBER}"
                        sh "docker push jj975/q1:wheeldeal.backend.r.${BUILD_NUMBER}"
                        sh "docker commit wheeldeal_frontend_b jj975/q1:wheeldeal.frontend.r.${BUILD_NUMBER}"
                        sh "docker push jj975/q1:wheeldeal.frontend.r.${BUILD_NUMBER}"
                }
            }
        }
    }
    post {
        always {
            script {
                sh "docker-compose -f ./docker-compose.build.stack.yaml down"
            }
            script {
                sh 'docker image prune -a --filter "until=24h" --force'
            }
        }
    }
}
